{
  "openapi": "3.0.1",
  "info": {
    "title": "Codecademy e-Commerce REST API - Ashleigh",
    "description": "Defines the backend logic relating to the <strong>'registration'</strong>, <strong>'customers'</strong>, <strong>'addresses'</strong>, <strong>'orders'</strong>, <strong>'products'</strong>, <strong>'cart'</strong>, and <strong>'login'</strong> endpoints of an e-commerce REST API.  <code>GET</code> operations can be performed directly on the <strong>HEROKU</strong> database; <code>POST</code>/<code>PUT</code>/<code>DELETE</code> operations can be performed on the <strong>SWAGGER HUB</strong> <em>virtual mocking server</em> so that the <strong>HEROKU</strong> database is not compromised.",
    "version": "0.1"
  },
  "servers": [
    {
      "url": "https://codecademy-e-commerce-rest-api.herokuapp.com",
      "description": "Heroku App"
    },
    {
      "url": "https://virtserver.swaggerhub.com/chris-larham-1983/e-Commerce_Registration_Customers_Addresses_Orders/0.1",
      "description": "SwaggerHub API Auto Mocking"
    }
  ],
  "paths": {
    "/api/registration": {
      "post": {
        "tags": [
          "Registration"
        ],
        "summary": "Register a new customer",
        "description": "Adds a new customer's details to the 'customers' and 'addresses' tables",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Registration"
              },
              "examples": {
                "0": {
                  "value": "{\n    \"first_name\": \"Customer First Name\",\n    \"last_name\": \"Customer Last Name\",\n    \"username\": \"Customer Username\",\n    \"password\": \"Customer Password\",\n    \"email\": \"Customer Email\",\n    \"street_number\": 7,\n    \"street_name\": \"Customer Street Name\",\n    \"town\": \"Customer Town\",\n    \"county\": \"Customer County\",\n    \"country\": \"Customer Country\",\n    \"postcode\": \"P05t c0d3\"\n}"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns a confirmation of successful customer registration",
            "content": {
              "text/html; charset=utf-8": {
                "schema": {
                  "type": "string",
                  "example": "Your customer profile has been created successfully"
                }
              }
            }
          },
          "500": {
            "description": "Returns a description of the error that was unexpectedly encountered",
            "content": {
              "text/html; charset=utf-8": {
                "schema": {
                  "type": "string",
                  "example": "DEPENDING ON THE NATURE OF THE ERROR {err.message} THAT WAS ENCOUNTERED - The username you have selected is already in use. Please choose a different username. -OR- The password you have selected is already in use. Please choose a different password. - OR - The email address you have selected is already in use. Please choose a different email address. - OR - The unexpected value of {err.message}."
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://virtserver.swaggerhub.com/chris-larham-1983/e-Commerce_Registration_Customers_Addresses_Orders/0.1",
            "description": "SwaggerHub API Auto Mocking"
          }
        ]
      },
      "servers": [
        {
          "url": "https://virtserver.swaggerhub.com/chris-larham-1983/e-Commerce_Registration_Customers_Addresses_Orders/0.1",
          "description": "SwaggerHub API Auto Mocking"
        }
      ]
    },
    "/api/customers": {
      "get": {
        "tags": [
          "Customers"
        ],
        "summary": "Return all customer information",
        "description": "Returns the 'id', 'first_name', 'last_name', 'username', 'password', and 'email' fields for all customers in the 'customers' table",
        "responses": {
          "200": {
            "description": "JSON array of customers",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Customer"
                  }
                },
                "example": [
                  {
                    "id": 1,
                    "first_name": "Mike",
                    "last_name": "Lamb",
                    "username": "mikelamb",
                    "password": "mlpass",
                    "email": "mikelamb@gmail.com"
                  },
                  {
                    "id": 2,
                    "first_name": "Charlie",
                    "last_name": "Bird",
                    "username": "charlieB",
                    "password": "birdC",
                    "email": "charlieb@gmail.com"
                  },
                  {
                    "id": 3,
                    "first_name": "Will",
                    "last_name": "Lime",
                    "username": "lime",
                    "password": "willie*",
                    "email": "willlime@gmail.com"
                  },
                  {
                    "id": 4,
                    "first_name": "Sarah",
                    "last_name": "Smith",
                    "username": "SarahS",
                    "password": "smith786*",
                    "email": "sarahsmith@gmail.com"
                  },
                  {
                    "id": 5,
                    "first_name": "Anna",
                    "last_name": "Rogers",
                    "username": "annaR",
                    "password": "rogersa",
                    "email": "ar@gmail.com"
                  },
                  {
                    "id": 6,
                    "first_name": "Mary",
                    "last_name": "Light",
                    "username": "Marylight",
                    "password": "LightM",
                    "email": "maryl@gmail.com"
                  },
                  {
                    "id": 7,
                    "first_name": "Judie",
                    "last_name": "Kim",
                    "username": "JudieK",
                    "password": "JudK*",
                    "email": "judiek@gmail.com"
                  },
                  {
                    "id": 8,
                    "first_name": "Margo",
                    "last_name": "Robbie",
                    "username": "MargoR",
                    "password": "MRobbie",
                    "email": "margor@gmail.com"
                  },
                  {
                    "id": 9,
                    "first_name": "Stephanie",
                    "last_name": "Jinks",
                    "username": "Stephjinks",
                    "password": "Jink7!",
                    "email": "stephJ@gmail.com"
                  },
                  {
                    "id": 10,
                    "first_name": "Jen",
                    "last_name": "Beet",
                    "username": "jenbeet",
                    "password": "beet",
                    "email": "jenb@gmail.com"
                  },
                  {
                    "id": 11,
                    "first_name": "Beth",
                    "last_name": "Polt",
                    "username": "Bethp",
                    "password": "Polt76",
                    "email": "bethp@gmail.com"
                  },
                  {
                    "id": 12,
                    "first_name": "Diane",
                    "last_name": "Intel",
                    "username": "dianei",
                    "password": "intel67",
                    "email": "dianei@outlook.com"
                  },
                  {
                    "id": 13,
                    "first_name": "Ocean",
                    "last_name": "Kinnel",
                    "username": "oceank",
                    "password": "kinnel75",
                    "email": "oceank@gmail.com"
                  }
                ]
              }
            }
          },
          "500": {
            "description": "Returns a description of the error {err} that was unexpectedly encountered",
            "content": {
              "text/html; charset=utf-8": {
                "schema": {
                  "type": "string",
                  "example": "The unexpected value of {err.message}."
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://codecademy-e-commerce-rest-api.herokuapp.com",
            "description": "Heroku App"
          },
          {
            "url": "https://virtserver.swaggerhub.com/chris-larham-1983/e-Commerce_Registration_Customers_Addresses_Orders/0.1",
            "description": "SwaggerHub API Auto Mocking"
          }
        ]
      },
      "servers": [
        {
          "url": "https://codecademy-e-commerce-rest-api.herokuapp.com",
          "description": "Heroku App"
        },
        {
          "url": "https://virtserver.swaggerhub.com/chris-larham-1983/e-Commerce_Registration_Customers_Addresses_Orders/0.1",
          "description": "SwaggerHub API Auto Mocking"
        }
      ]
    },
    "/api/customers/{customerId}": {
      "get": {
        "tags": [
          "Customers"
        ],
        "summary": "Return information relating to a specific customer",
        "description": "Returns the 'first_name', 'last_name', 'username', 'password', and 'email' fields relating to the customer whose id is 'customer_id'",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "The customer ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A customer object",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                },
                "example": "{\n  \"id\": 1,\n  \"first_name\": \"Ashleigh\",\n  \"last_name\": \"Benater\",\n  \"username\": \"ashben\",\n  \"password\": \"ashben*\",\n  \"email\": \"ash_benater@hotmail.com\"\n}  "
              }
            }
          },
          "404": {
            "description": "Customer with the specified ID not found in the database",
            "content": {
              "text/html; charset=utf-8": {
                "schema": {
                  "type": "string",
                  "example": "Customer does not exist in the database."
                }
              }
            }
          },
          "500": {
            "description": "Returns a description of the error {err} that was unexpectedly encountered",
            "content": {
              "text/html; charset=utf-8": {
                "schema": {
                  "type": "string",
                  "example": "The unexpected value of {err.message}."
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://codecademy-e-commerce-rest-api.herokuapp.com",
            "description": "Heroku App"
          },
          {
            "url": "https://virtserver.swaggerhub.com/chris-larham-1983/e-Commerce_Registration_Customers_Addresses_Orders/0.1",
            "description": "SwaggerHub API Auto Mocking"
          }
        ]
      },
      "put": {
        "tags": [
          "Customers"
        ],
        "summary": "Update a specific customer's details",
        "description": "Updates the 'first_name', 'last_name', 'username', and 'password' details for the customer whose id is 'customer_id'",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "The customer ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerUpdate"
              },
              "examples": {
                "0": {
                  "value": "{\n    \"first_name\": \"Ashleigh\",\n    \"last_name\": \"Benater\",\n    \"username\": \"ashben\",\n    \"password\": \"ashben\",\n    \"email\": \"ash_benater@hotmail.com\"\n}"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "String confirmation that the customer's details were updated successfully",
            "content": {
              "text/html; charset=utf-8": {
                "schema": {
                  "type": "string",
                  "example": "Customer with id {customerId} updated successfully"
                }
              }
            }
          },
          "404": {
            "description": "Customer with the specified ID not found in the database",
            "content": {
              "text/html; charset=utf-8": {
                "schema": {
                  "type": "string",
                  "example": "Customer does not exist in the database."
                }
              }
            }
          },
          "500": {
            "description": "Returns a description of the error {err} that was unexpectedly encountered",
            "content": {
              "text/html; charset=utf-8": {
                "schema": {
                  "type": "string",
                  "example": "The unexpected value of {err.message}."
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://virtserver.swaggerhub.com/chris-larham-1983/e-Commerce_Registration_Customers_Addresses_Orders/0.1",
            "description": "SwaggerHub API Auto Mocking"
          }
        ]
      },
      "delete": {
        "tags": [
          "Customers"
        ],
        "summary": "Delete a specific customer from the database",
        "description": "Deletes the customer details relating to the customer whose id is 'customerId' from the 'customers' table",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "The customer ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "String confirmation that the customer details belonging to the customer with id 'customerId' have been deleted from the 'customers' table",
            "content": {
              "text/html; charset=utf-8": {
                "schema": {
                  "type": "string"
                },
                "example": "Customer with id {customerId} deleted successfully"
              }
            }
          },
          "500": {
            "description": "Returns a description of the error {err} that was unexpectedly encountered",
            "content": {
              "text/html; charset=utf-8": {
                "schema": {
                  "type": "string",
                  "example": "The unexpected value of {err.message}."
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://virtserver.swaggerhub.com/chris-larham-1983/e-Commerce_Registration_Customers_Addresses_Orders/0.1",
            "description": "SwaggerHub API Auto Mocking"
          }
        ]
      },
      "servers": [
        {
          "url": "https://virtserver.swaggerhub.com/chris-larham-1983/e-Commerce_Registration_Customers_Addresses_Orders/0.1",
          "description": "SwaggerHub API Auto Mocking"
        }
      ]
    },
    "/api/addresses": {
      "get": {
        "tags": [
          "Addresses"
        ],
        "summary": "Return the addresses for all customers",
        "description": "Returns all the addresses in the 'addresses' table",
        "responses": {
          "200": {
            "description": "Returns a JSON array of addresses",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Address"
                  }
                },
                "example": [
                  {
                    "id": 1,
                    "street_number": 16,
                    "town": "Bath",
                    "country": "England",
                    "postcode": "PL22 8TS",
                    "customer_id": 1,
                    "street_name": "Bridge Way"
                  },
                  {
                    "id": 2,
                    "street_number": 13,
                    "town": "St. Austin",
                    "country": "England",
                    "postcode": "KD26 7GH",
                    "customer_id": 2,
                    "street_name": "Jill Way"
                  },
                  {
                    "id": 3,
                    "street_number": 11,
                    "town": "Duke",
                    "country": "England",
                    "postcode": "SO26 9PL",
                    "customer_id": 3,
                    "street_name": "Reff Way"
                  },
                  {
                    "id": 4,
                    "street_number": 99,
                    "town": "St. Bell",
                    "country": "England",
                    "postcode": "DE56 3HT",
                    "customer_id": 4,
                    "street_name": "Bell Way"
                  },
                  {
                    "id": 5,
                    "street_number": 19,
                    "town": "Bath",
                    "country": "England",
                    "postcode": "PL73 8KH",
                    "customer_id": 5,
                    "street_name": "Knight Way"
                  },
                  {
                    "id": 6,
                    "street_number": 88,
                    "town": "Bugle",
                    "country": "England",
                    "postcode": "LO26 8SJ",
                    "customer_id": 10,
                    "street_name": "Springfields"
                  },
                  {
                    "id": 7,
                    "street_number": 456,
                    "town": "Uponville",
                    "country": "Pluto",
                    "postcode": "P249 PLUTO",
                    "customer_id": 11,
                    "street_name": "Rainbow Sky Rd"
                  },
                  {
                    "id": 8,
                    "street_number": 9,
                    "town": "Eden",
                    "country": "Heaven",
                    "postcode": "HEA VEN",
                    "customer_id": 12,
                    "street_name": "Creation Rd"
                  },
                  {
                    "id": 9,
                    "street_number": 8,
                    "town": "Crumble",
                    "country": "England",
                    "postcode": "KD45 4BJ",
                    "customer_id": 6,
                    "street_name": "Hill Park"
                  },
                  {
                    "id": 10,
                    "street_number": 9,
                    "town": "St. Plage",
                    "country": "England",
                    "postcode": "KO95 4PJ",
                    "customer_id": 7,
                    "street_name": "North Park"
                  },
                  {
                    "id": 11,
                    "street_number": 3,
                    "town": "St. Day",
                    "country": "England",
                    "postcode": "TR18 8LS",
                    "customer_id": 8,
                    "street_name": "Tranny Road"
                  },
                  {
                    "id": 12,
                    "street_number": 5,
                    "town": "Rule",
                    "country": "England",
                    "postcode": "UI87 1SJ",
                    "customer_id": 9,
                    "street_name": "Rem Rd"
                  },
                  {
                    "id": 13,
                    "street_number": 14,
                    "town": "Shulz",
                    "country": "Germany",
                    "postcode": "P098 C0D3",
                    "customer_id": 13,
                    "street_name": "Blogschuls St"
                  }
                ]
              }
            }
          },
          "500": {
            "description": "Returns a description of the error {err} that was unexpectedly encountered",
            "content": {
              "text/html; charset=utf-8": {
                "schema": {
                  "type": "string",
                  "example": "The unexpected value of {err.message}."
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://codecademy-e-commerce-rest-api.herokuapp.com",
            "description": "Heroku App"
          },
          {
            "url": "https://virtserver.swaggerhub.com/chris-larham-1983/e-Commerce_Registration_Customers_Addresses_Orders/0.1",
            "description": "SwaggerHub API Auto Mocking"
          }
        ]
      },
      "servers": [
        {
          "url": "https://codecademy-e-commerce-rest-api.herokuapp.com",
          "description": "Heroku App"
        },
        {
          "url": "https://virtserver.swaggerhub.com/chris-larham-1983/e-Commerce_Registration_Customers_Addresses_Orders/0.1",
          "description": "SwaggerHub API Auto Mocking"
        }
      ]
    },
    "/api/addresses/{customerId}": {
      "get": {
        "tags": [
          "Addresses"
        ],
        "summary": "Return the address information for a specific customer",
        "description": "Returns the 'street_number', 'street_name', 'town', 'county', 'country', and 'postcode' fields for the customer whose id is 'customerId', in a single element array",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "The customer ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful return of the relevant customer address object in a single element array",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AddressCustomer"
                  }
                },
                "example": [
                  {
                      "id": 13,
                      "street_number": 14,
                      "town": "Shulz",
                      "country": "Germany",
                      "postcode": "P098 C0D3",
                      "customer_id": 13,
                      "street_name": "Blogschuls St"
                  }
                ]
              }
            }
          },
          "404": {
            "description": "No address found for the specified customer",
            "content": {
              "text/html; charset=utf-8": {
                "schema": {
                  "type": "string",
                  "example": "No address is associated with this customer id."
                }
              }
            }
          },
          "500": {
            "description": "Returns a description of the error {err} that was unexpectedly encountered",
            "content": {
              "text/html; charset=utf-8": {
                "schema": {
                  "type": "string",
                  "example": "The unexpected value of {err.message}."
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://codecademy-e-commerce-rest-api.herokuapp.com",
            "description": "Heroku App"
          },
          {
            "url": "https://virtserver.swaggerhub.com/chris-larham-1983/e-Commerce_Registration_Customers_Addresses_Orders/0.1",
            "description": "SwaggerHub API Auto Mocking"
          }
        ]
      },
      "servers": [
        {
          "url": "https://codecademy-e-commerce-rest-api.herokuapp.com",
          "description": "Heroku App"
        },
        {
          "url": "https://virtserver.swaggerhub.com/chris-larham-1983/e-Commerce_Registration_Customers_Addresses_Orders/0.1",
          "description": "SwaggerHub API Auto Mocking"
        }
      ]
    },
    "/api/addresses/{customerId}/{addressId}": {
      "put": {
        "tags": [
          "Addresses"
        ],
        "summary": "Update a particular address belonging to a specific customer",
        "description": "Updates the address that is specified by 'addressId', belonging to the customer whose id is 'customerId'",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "The customer ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "addressId",
            "in": "path",
            "description": "The address ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddressCustomer"
              },
              "examples": {
                "0": {
                  "value": "{\n    \"street_number\": 14,\n    \"street_name\": \"Updated Street Name\",\n    \"town\": \"Updated Town\",\n    \"county\": \"Updated County\",\n    \"country\": \"Updated Country\",\n    \"postcode\": \"P05t c0d3\"\n}"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns a string confirmation of successful address update",
            "content": {
              "text/html; charset=utf-8": {
                "schema": {
                  "type": "string"
                },
                "example": "Your address has been updated successfully."
              }
            }
          },
          "404": {
            "description": "Specified address not associated with the specified customer in the database",
            "content": {
              "text/html; charset=utf-8": {
                "schema": {
                  "type": "string",
                  "example": "This address is not associated with this customer id."
                }
              }
            }
          },
          "500": {
            "description": "Returns a description of the error {err} that was unexpectedly encountered",
            "content": {
              "text/html; charset=utf-8": {
                "schema": {
                  "type": "string",
                  "example": "The unexpected value of {err.message}."
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://virtserver.swaggerhub.com/chris-larham-1983/e-Commerce_Registration_Customers_Addresses_Orders/0.1",
            "description": "SwaggerHub API Auto Mocking"
          }
        ]
      },
      "servers": [
        {
          "url": "https://virtserver.swaggerhub.com/chris-larham-1983/e-Commerce_Registration_Customers_Addresses_Orders/0.1",
          "description": "SwaggerHub API Auto Mocking"
        }
      ]
    },
    "/api/orders/{customerId}": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Return the order history for a particular customer",
        "description": "Returns the order history of the customer whose id is 'customerId'",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "The user ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of JSON objects representing the order history of the specified customer",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Order"
                  }
                },
                "example": [
                  {
                    "order_id": 3,
                    "date_of_purchase": "2022-02-25T23:52:32.080Z",
                    "cart": [
                      {
                        "product_id": 3,
                        "customer_id": 12,
                        "product_name": "Banana",
                        "product_description": "Chiquita banana",
                        "product_image_url": "https://www.luluhypermarket.com/cdn-cgi/image/f=auto/medias/380260-01.jpg-1200Wx1200H?context=bWFzdGVyfGltYWdlc3wyNjU1Mzh8aW1hZ2UvanBlZ3xhVzFoWjJWekwyZzFOQzlvTkdNdmFEQXdMemt6TURBek16VXhPVGd5TXpndWFuQm58M2Y5MjUxYmI5ZTliNWU4MjgyMWVkYTUzNDFhNWZkZjM5MzVhYmJmMGIyYzk4YTZkMTAyMmE4YmRhMmJlZWMzNQ",
                        "product_price": 1.5,
                        "product_quantity": 10,
                        "cumulative_product_price": 15,
                        "cart_total": 15
                      }
                    ]
                  },
                  {
                    "order_id": 2,
                    "date_of_purchase": "2022-02-23T21:04:14.510Z",
                    "cart": [
                      {
                        "product_id": 5,
                        "customer_id": 12,
                        "product_name": "Grapes",
                        "product_description": "Green seedless grapes",
                        "product_image_url": "https://target.scene7.com/is/image/Target/GUEST_27ecaa50-cac2-49f8-9a9b-e59800e28d8a?wid=488&hei=488&fmt=pjpeg",
                        "product_price": 2.4,
                        "product_quantity": 2,
                        "cumulative_product_price": 4.8,
                        "cart_total": 4.8
                      },
                      {
                        "product_id": 4,
                        "customer_id": 12,
                        "product_name": "Pineapple",
                        "product_description": "Fresh juicy pineapple",
                        "product_image_url": "https://i5.walmartimages.com/seo/Fresh-Pineapple-Each_1d2b3723-b31f-481d-ae30-c82fcbb59e20.d2e4de8d8b987f98a6e9da93a7e8c752.jpeg",
                        "product_price": 700,
                        "product_quantity": 1,
                        "cumulative_product_price": 700,
                        "cart_total": 700
                      }
                    ]
                  }
                ]
              }
            }
          },
          "404": {
            "description": "No orders belonging to the specified customer were found in the database",
            "content": {
              "text/html; charset=utf-8": {
                "schema": {
                  "type": "string",
                  "example": "No orders belonging to the specified customer were found in the database."
                }
              }
            }
          },
          "500": {
            "description": "Returns a description of the error {err} that was unexpectedly encountered",
            "content": {
              "text/html; charset=utf-8": {
                "schema": {
                  "type": "string",
                  "example": "The unexpected value of {err.message}."
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://codecademy-e-commerce-rest-api.herokuapp.com",
            "description": "Heroku App"
          },
          {
            "url": "https://virtserver.swaggerhub.com/chris-larham-1983/e-Commerce_Registration_Customers_Addresses_Orders/0.1",
            "description": "SwaggerHub API Auto Mocking"
          }
        ]
      },
      "servers": [
        {
          "url": "https://codecademy-e-commerce-rest-api.herokuapp.com",
          "description": "Heroku App"
        },
        {
          "url": "https://virtserver.swaggerhub.com/chris-larham-1983/e-Commerce_Registration_Customers_Addresses_Orders/0.1",
          "description": "SwaggerHub API Auto Mocking"
        }
      ]
    },
    "/api/orders/{customerId}/{orderId}": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Return the specified order details for the specified customer",
        "description": "Returns the order details of the order whose id is 'orderId', made by the customer whose id is 'customerId'",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "The user ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "orderId",
            "in": "path",
            "description": "The order ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a single-element array containing the specified order details for the specified customer",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Order"
                  }
                },
                "example": [
                  {
                    "order_id": 3,
                    "date_of_purchase": "2022-02-25T23:52:32.080Z",
                    "cart": [
                      {
                        "product_id": 3,
                        "customer_id": 12,
                        "product_name": "Banana",
                        "product_description": "Chiquita banana",
                        "product_image_url": "https://www.luluhypermarket.com/cdn-cgi/image/f=auto/medias/380260-01.jpg-1200Wx1200H?context=bWFzdGVyfGltYWdlc3wyNjU1Mzh8aW1hZ2UvanBlZ3xhVzFoWjJWekwyZzFOQzlvTkdNdmFEQXdMemt6TURBek16VXhPVGd5TXpndWFuQm58M2Y5MjUxYmI5ZTliNWU4MjgyMWVkYTUzNDFhNWZkZjM5MzVhYmJmMGIyYzk4YTZkMTAyMmE4YmRhMmJlZWMzNQ",
                        "product_price": 1.5,
                        "product_quantity": 2,
                        "cumulative_product_price": 3,
                        "cart_total": 3
                      }
                    ]
                  }
                ]
              }
            }
          },
          "404": {
            "description": "No association of the specified 'customerId' and 'orderId' exists in the database",
            "content": {
              "text/html; charset=utf-8": {
                "schema": {
                  "type": "string",
                  "example": "No association of the specified customer ID and order ID exists in the database."
                }
              }
            }
          },
          "500": {
            "description": "Returns a description of the error {err} that was unexpectedly encountered",
            "content": {
              "text/html; charset=utf-8": {
                "schema": {
                  "type": "string",
                  "example": "The unexpected value of {err.message}."
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://codecademy-e-commerce-rest-api.herokuapp.com",
            "description": "Heroku App"
          },
          {
            "url": "https://virtserver.swaggerhub.com/chris-larham-1983/e-Commerce_Registration_Customers_Addresses_Orders/0.1",
            "description": "SwaggerHub API Auto Mocking"
          }
        ]
      },
      "servers": [
        {
          "url": "https://codecademy-e-commerce-rest-api.herokuapp.com",
          "description": "Heroku App"
        },
        {
          "url": "https://virtserver.swaggerhub.com/chris-larham-1983/e-Commerce_Registration_Customers_Addresses_Orders/0.1",
          "description": "SwaggerHub API Auto Mocking"
        }
      ]
    },
    "/api/products": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Return all product information",
        "description": "Returns an array of JSON objects that describe the products in the database",
        "responses": {
          "200": {
            "description": "Indicates the successful return of an array of JSON objects that describe the products in the database",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Product"
                  }
                },
                "example": [
                  {
                    "id": 1,
                    "item_name": "Apple",
                    "item_description": "Jonagold apple",
                    "image_url": "https://encrypted-tbn0.gstatic.com/licensed-image?q=tbn:ANd9GcQ5kTGZx1WSOeYj3FYNlNjHhC3bI-Z9Wz2DThlyieHhdz9psWBunAoi1_JqZ0_AoU2zli04sB_ZAQo6mqU",
                    "price": 1
                  },
                  {
                    "id": 2,
                    "item_name": "Pear",
                    "item_description": "Packham pear",
                    "image_url": "https://img.taste.com.au/-q1wYTzy/taste/2016/11/packham-pears-53031-1.jpg",
                    "price": 1.2
                  },
                  {
                    "id": 3,
                    "item_name": "Banana",
                    "item_description": "Chiquita banana",
                    "image_url": "https://www.luluhypermarket.com/cdn-cgi/image/f=auto/medias/380260-01.jpg-1200Wx1200H?context=bWFzdGVyfGltYWdlc3wyNjU1Mzh8aW1hZ2UvanBlZ3xhVzFoWjJWekwyZzFOQzlvTkdNdmFEQXdMemt6TURBek16VXhPVGd5TXpndWFuQm58M2Y5MjUxYmI5ZTliNWU4MjgyMWVkYTUzNDFhNWZkZjM5MzVhYmJmMGIyYzk4YTZkMTAyMmE4YmRhMmJlZWMzNQ",
                    "price": 1.5
                  },
                  {
                    "id": 4,
                    "item_name": "Pineapple",
                    "item_description": "Fresh juicy pineapple",
                    "image_url": "https://i5.walmartimages.com/seo/Fresh-Pineapple-Each_1d2b3723-b31f-481d-ae30-c82fcbb59e20.d2e4de8d8b987f98a6e9da93a7e8c752.jpeg",
                    "price": 700
                  },
                  {
                    "id": 5,
                    "item_name": "Grapes",
                    "item_description": "Green seedless grapes",
                    "image_url": "https://target.scene7.com/is/image/Target/GUEST_27ecaa50-cac2-49f8-9a9b-e59800e28d8a?wid=488&hei=488&fmt=pjpeg",
                    "price": 2.4
                  },
                  {
                    "id": 6,
                    "item_name": "Kiwi",
                    "item_description": "Golden kiwi",
                    "image_url": "https://aswaqrak.ae/pub/media/catalog/product/cache/9e61d75d633e5fc1a695bad0376a2475/1/5/1500885.jpg",
                    "price": 2.3
                  },
                  {
                    "id": 7,
                    "item_name": "Orange",
                    "item_description": "Fresh oranges",
                    "image_url": "https://upload.wikimedia.org/wikipedia/commons/thumb/c/c4/Orange-Fruit-Pieces.jpg/1200px-Orange-Fruit-Pieces.jpg",
                    "price": 1.5
                  },
                  {
                    "id": 8,
                    "item_name": "Watermelon",
                    "item_description": "Seedless watermelon",
                    "image_url": "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRvd7S3ttD-z8Cj6O023xSzk374NSdlpLn6dg&usqp=CAU",
                    "price": 5
                  }
                ]
              }
            }
          },
          "500": {
            "description": "Returns a description of the error {err} that was unexpectedly encountered",
            "content": {
              "text/html; charset=utf-8": {
                "schema": {
                  "type": "string",
                  "example": "The unexpected value of {err.message}."
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://codecademy-e-commerce-rest-api.herokuapp.com",
            "description": "Heroku App"
          },
          {
            "url": "https://virtserver.swaggerhub.com/chris-larham-1983/e-Commerce_Registration_Customers_Addresses_Orders/0.1",
            "description": "SwaggerHub API Auto Mocking"
          }
        ]
      },
      "post": {
        "tags": [
          "Products"
        ],
        "summary": "Add a product to the database",
        "description": "Adds a product to the 'products' table of the e-Commerce database",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductCreation"
              },
              "examples": {
                "0": {
                  "value": "{\n    \"item_name\": \"Item Name [varchar(50)]\",\n    \"item_description\": \"Item Description [text]\",\n    \"image_url\": \"The URL of the image associated with the item [varchar(100)]\",\n    \"price\": 1000\n}"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "String response that confirms product creation success",
            "content": {
              "text/html; charset=utf-8": {
                "schema": {
                  "type": "string"
                },
                "example": "Product created successfully."
              }
            }
          },
          "409": {
            "description": "The product's 'image_url' is already in use and thus violates the unique constraint",
            "content": {
              "text/html; charset=utf-8": {
                "schema": {
                  "type": "string",
                  "example": "Product creation did not succeed because the image URL is already in use."
                }
              }
            }
          },
          "500": {
            "description": "Returns a description of the error {err} that was unexpectedly encountered",
            "content": {
              "text/html; charset=utf-8": {
                "schema": {
                  "type": "string",
                  "example": "The unexpected value of {err.message}."
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://virtserver.swaggerhub.com/chris-larham-1983/e-Commerce_Registration_Customers_Addresses_Orders/0.1",
            "description": "SwaggerHub API Auto Mocking"
          }
        ]
      },
      "servers": [
        {
          "url": "https://virtserver.swaggerhub.com/chris-larham-1983/e-Commerce_Registration_Customers_Addresses_Orders/0.1",
          "description": "SwaggerHub API Auto Mocking"
        }
      ]
    },
    "/api/products/{productId}": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Return information relating to a particular product",
        "description": "Returns a JSON object that describes the product specified by 'productId'",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "The product ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Denotes the successful return of a JSON object that describes the product specified by 'productId'",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                },
                "example": "{\n  \"id\": 1,\n   \"item_name\": \"Pear\",\n   \"item_description\": \"Packham pear\",\n   \"image_url\": \"https://img.taste.com.au/-q1wYTzy/taste/2016/11/packham-pears-53031-1.jpg\",\n   \"price\": 700\n}"
              }
            }
          },
          "404": {
            "description": "No product with the specified ID found in the database.",
            "content": {
              "text/html; charset=utf-8": {
                "schema": {
                  "type": "string",
                  "example": "No product with the specified ID found in the database."
                }
              }
            }
          },
          "500": {
            "description": "Returns a description of the error {err} that was unexpectedly encountered",
            "content": {
              "text/html; charset=utf-8": {
                "schema": {
                  "type": "string",
                  "example": "The unexpected value of {err.message}."
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://codecademy-e-commerce-rest-api.herokuapp.com",
            "description": "Heroku App"
          },
          {
            "url": "https://virtserver.swaggerhub.com/chris-larham-1983/e-Commerce_Registration_Customers_Addresses_Orders/0.1",
            "description": "SwaggerHub API Auto Mocking"
          }
        ]
      },
      "put": {
        "tags": [
          "Products"
        ],
        "summary": "Update the details of a particular product",
        "description": "Updates the details of the product specified by 'productId'",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "The product ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductUpdate"
              },
              "examples": {
                "0": {
                  "value": "{\n    \"item_name\": \"Item Name [varchar(50)]\",\n    \"item_description\": \"Item Description [text]\",\n    \"image_url\": \"The UNIQUE URL of the image associated with the item [varchar(100)]\",\n    \"price\": 1250\n}"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A string that confirms the product update success",
            "content": {
              "text/html; charset=utf-8": {
                "schema": {
                  "type": "string"
                },
                "example": "Product with id {productId} modified successfully."
              }
            }
          },
          "404": {
            "description": "No product with the specified ID found in the database",
            "content": {
              "text/html; charset=utf-8": {
                "schema": {
                  "type": "string",
                  "example": "No product with the specified ID found in the database."
                }
              }
            }
          },
          "500": {
            "description": "Returns a description of the error {err} that was unexpectedly encountered",
            "content": {
              "text/html; charset=utf-8": {
                "schema": {
                  "type": "string",
                  "example": "The unexpected value of {err.message}."
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://virtserver.swaggerhub.com/chris-larham-1983/e-Commerce_Registration_Customers_Addresses_Orders/0.1",
            "description": "SwaggerHub API Auto Mocking"
          }
        ]
      },
      "delete": {
        "tags": [
          "Products"
        ],
        "summary": "Delete a product from the database",
        "description": "Auto generated using Swagger Inspector",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "The product ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "String that signifies the specified product was successfully deleted",
            "content": {
              "text/html; charset=utf-8": {
                "schema": {
                  "type": "string"
                },
                "example": "Product with id {productId} deleted."
              }
            }
          },
          "500": {
            "description": "Returns a description of the error {err} that was unexpectedly encountered",
            "content": {
              "text/html; charset=utf-8": {
                "schema": {
                  "type": "string",
                  "example": "The unexpected value of {err.message}."
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://virtserver.swaggerhub.com/chris-larham-1983/e-Commerce_Registration_Customers_Addresses_Orders/0.1",
            "description": "SwaggerHub API Auto Mocking"
          }
        ]
      },
      "servers": [
        {
          "url": "https://virtserver.swaggerhub.com/chris-larham-1983/e-Commerce_Registration_Customers_Addresses_Orders/0.1",
          "description": "SwaggerHub API Auto Mocking"
        }
      ]
    },
    "/api/cart/{customerId}": {
      "get": {
        "tags": [
          "Cart"
        ],
        "summary": "Return the cart details for a particular customer",
        "description": "Returns an array of JSON objects that detail the cart contents of the customer specified by 'customerId'",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "The customer ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Denotes the successful return of an array of JSON objects that detail the cart contents of the customer specified by 'customerId'",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CartItem"
                  }
                },
                "example": [
                  {
                    "product_id": 3,
                    "customer_id": 12,
                    "product_name": "Banana",
                    "product_description": "Chiquita banana",
                    "product_image_url": "https://www.luluhypermarket.com/cdn-cgi/image/f=auto/medias/380260-01.jpg-1200Wx1200H?context=bWFzdGVyfGltYWdlc3wyNjU1Mzh8aW1hZ2UvanBlZ3xhVzFoWjJWekwyZzFOQzlvTkdNdmFEQXdMemt6TURBek16VXhPVGd5TXpndWFuQm58M2Y5MjUxYmI5ZTliNWU4MjgyMWVkYTUzNDFhNWZkZjM5MzVhYmJmMGIyYzk4YTZkMTAyMmE4YmRhMmJlZWMzNQ",
                    "product_price": 6,
                    "product_quantity": 5,
                    "cumulative_product_price": 30,
                    "cart_total": 30
                  },
                  {
                    "product_id": 4,
                    "customer_id": 12,
                    "product_name": "Pineapple",
                    "product_description": "Fresh juicy pineapple",
                    "product_image_url": "https://i5.walmartimages.com/seo/Fresh-Pineapple-Each_1d2b3723-b31f-481d-ae30-c82fcbb59e20.d2e4de8d8b987f98a6e9da93a7e8c752.jpeg",
                    "product_price": 7,
                    "product_quantity": 7,
                    "cumulative_product_price": 49,
                    "cart_total": 49
                  }
                ]
              }
            }
          },
          "404": {
            "description": "There is nothing in the specified customer's shopping cart",
            "content": {
              "text/html; charset=utf-8": {
                "schema": {
                  "type": "string",
                  "example": "Your shopping cart is empty."
                }
              }
            }
          },
          "500": {
            "description": "Returns a description of the error {err} that was unexpectedly encountered",
            "content": {
              "text/html; charset=utf-8": {
                "schema": {
                  "type": "string",
                  "example": "The unexpected value of {err.message}."
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://codecademy-e-commerce-rest-api.herokuapp.com",
            "description": "Heroku App"
          },
          {
            "url": "https://virtserver.swaggerhub.com/chris-larham-1983/e-Commerce_Registration_Customers_Addresses_Orders/0.1",
            "description": "SwaggerHub API Auto Mocking"
          }
        ]
      },
      "put": {
        "tags": [
          "Cart"
        ],
        "summary": "Update the quantity of a particular product in the customer's cart",
        "description": "Updates the quantity of a particular product in the shopping cart of the customer specified by 'customerId'. As this is only an update operation, if an invalid 'customerId' or 'productId' is passed to this endpoint then the 'update' occurs to a non-existing record and a success response is returned.",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "The customer ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CartAddUpdate"
              },
              "examples": {
                "0": {
                  "value": "{\n    \"product_id\": 3,\n    \"product_quantity\": 9\n}"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A string confirmation that the quantity of a particular product has been updated",
            "content": {
              "text/html; charset=utf-8": {
                "schema": {
                  "type": "string"
                },
                "example": "Quantity (9) of product with id 3 updated successfully."
              }
            }
          },
          "500": {
            "description": "Returns a description of the error {err} that was unexpectedly encountered",
            "content": {
              "text/html; charset=utf-8": {
                "schema": {
                  "type": "string",
                  "example": "The unexpected value of {err.message}."
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://virtserver.swaggerhub.com/chris-larham-1983/e-Commerce_Registration_Customers_Addresses_Orders/0.1",
            "description": "SwaggerHub API Auto Mocking"
          }
        ]
      },
      "post": {
        "tags": [
          "Cart"
        ],
        "summary": "Add a certain quantity of a particular product to the customer's cart",
        "description": "Adds a defined quantity of a particular item to the specified customer's shopping cart",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "The customer ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CartAddUpdate"
              },
              "examples": {
                "0": {
                  "value": "{\n    \"product_id\": 3,\n    \"product_quantity\": 5\n}"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "String confirmation of the number of products added to the cart",
            "content": {
              "text/html; charset=utf-8": {
                "schema": {
                  "type": "string"
                },
                "example": "5 product(s) with id 3 added to cart."
              }
            }
          },
          "400": {
            "description": "No record of a customer with the specified 'customerId' exists in the database.",
            "content": {
              "text/html; charset=utf-8": {
                "schema": {
                  "type": "string",
                  "example": "There is no record of a customer with the specified 'customerId' in the database."
                }
              }
            }
          },
          "404": {
            "description": "No record of a product with the specified 'productId' exists in the database.",
            "content": {
              "text/html; charset=utf-8": {
                "schema": {
                  "type": "string",
                  "example": "There is no record of a product with the specified 'productId' in the database."
                }
              }
            }
          },
          "500": {
            "description": "Returns a description of the error {err} that was unexpectedly encountered",
            "content": {
              "text/html; charset=utf-8": {
                "schema": {
                  "type": "string",
                  "example": "The unexpected value of {err.message}."
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://virtserver.swaggerhub.com/chris-larham-1983/e-Commerce_Registration_Customers_Addresses_Orders/0.1",
            "description": "SwaggerHub API Auto Mocking"
          }
        ]
      },
      "servers": [
        {
          "url": "https://virtserver.swaggerhub.com/chris-larham-1983/e-Commerce_Registration_Customers_Addresses_Orders/0.1",
          "description": "SwaggerHub API Auto Mocking"
        }
      ]
    },
    "/api/cart/{customerId}/{productId}": {
      "delete": {
        "tags": [
          "Cart"
        ],
        "summary": "Delete a particular product from the specified customer's cart",
        "description": "Removes the product specified by 'productId' from the shopping cart of the customer specified by 'customerId'. As this is only a delete operation, if an incorrect 'customerId' or 'productId' is present then the 'delete' occurs on an empty field and a success response is returned.",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "The customer ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "productId",
            "in": "path",
            "description": "The product Id",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "String confirmation that the product specified by 'productId' has been removed from the shopping cart of the customer specified by 'customerId'",
            "content": {
              "text/html; charset=utf-8": {
                "schema": {
                  "type": "string"
                },
                "example": "Product with id {productId} removed from your cart."
              }
            }
          },
          "500": {
            "description": "Returns a description of the error {err} that was unexpectedly encountered",
            "content": {
              "text/html; charset=utf-8": {
                "schema": {
                  "type": "string",
                  "example": "The unexpected value of {err.message}."
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://virtserver.swaggerhub.com/chris-larham-1983/e-Commerce_Registration_Customers_Addresses_Orders/0.1",
            "description": "SwaggerHub API Auto Mocking"
          }
        ]
      },
      "servers": [
        {
          "url": "https://virtserver.swaggerhub.com/chris-larham-1983/e-Commerce_Registration_Customers_Addresses_Orders/0.1",
          "description": "SwaggerHub API Auto Mocking"
        }
      ]
    },
    "/api/cart/{customerId}/checkoutComplete": {
      "post": {
        "tags": [
          "Cart"
        ],
        "summary": "Save the specified customer's order to the database and clears the customer's shopping cart",
        "description": "This endpoint is used once the customer specified by 'customerId' has successfully paid for their items. It saves the customer's order to the 'orders' table, clears the shopping cart associated with the customer in the 'cart' table, and returns a string confirmation of this process.",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "The customer ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "String confirmation that the customer's order has been saved and their cart has been cleared.",
            "content": {
              "text/html; charset=utf-8": {
                "schema": {
                  "type": "string"
                },
                "example": "Your transaction has been added to your order history and your cart has been cleared. We hope you enjoy your purchase!"
              }
            }
          },
          "404": {
            "description": "No cart is associated with the specified customer.",
            "content": {
              "text/html; charset=utf-8": {
                "schema": {
                  "type": "string",
                  "example": "Your cart is empty so there is nothing to process!"
                }
              }
            }
          },
          "500": {
            "description": "Returns a description of the error {err} that was unexpectedly encountered",
            "content": {
              "text/html; charset=utf-8": {
                "schema": {
                  "type": "string",
                  "example": "The unexpected value of {err.message}."
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://virtserver.swaggerhub.com/chris-larham-1983/e-Commerce_Registration_Customers_Addresses_Orders/0.1",
            "description": "SwaggerHub API Auto Mocking"
          }
        ]
      },
      "servers": [
        {
          "url": "https://virtserver.swaggerhub.com/chris-larham-1983/e-Commerce_Registration_Customers_Addresses_Orders/0.1",
          "description": "SwaggerHub API Auto Mocking"
        }
      ]
    },
    "/login": {
      "get": {
        "tags": [
          "Login"
        ],
        "summary": "Render a form that allows the customer to log in",
        "description": "Renders the login page",
        "responses": {
          "200": {
            "description": "Successful render of the login page",
            "content": {
              "text/html; charset=utf-8": {
                "schema": {
                  "type": "string"
                },
                "example": "Login View"
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://codecademy-e-commerce-rest-api.herokuapp.com",
            "description": "Heroku App"
          },
          {
            "url": "https://virtserver.swaggerhub.com/chris-larham-1983/e-Commerce_Registration_Customers_Addresses_Orders/0.1",
            "description": "SwaggerHub API Auto Mocking"
          }
        ]
      },
      "servers": [
        {
          "url": "https://codecademy-e-commerce-rest-api.herokuapp.com",
          "description": "Heroku App"
        },
        {
          "url": "https://virtserver.swaggerhub.com/chris-larham-1983/e-Commerce_Registration_Customers_Addresses_Orders/0.1",
          "description": "SwaggerHub API Auto Mocking"
        }
      ]
    },
    "/login/authenticated": {
      "post": {
        "tags": [
          "Login"
        ],
        "summary": "Process the customer's submitted username and password",
        "description": "This endpoint receives a 'username' and 'password' and either renders the 'Logged In View' or redirects to the 'Login Failure View', depending on whether the supplied fields authenticate successfully.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Login"
              },
              "examples": {
                "0": {
                  "value": "{\n    \"username\": \"chris_larham_1983\",\n    \"password\": \"updated_chrissy_b0i*\"\n}"
                },
                "1": {
                  "value": "{\n    \"username\": \"wrong_username\",\n    \"password\": \"wrong_password\"\n}"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Used to describe 2 possible outcomes - 1. Successful authentication of the user-supplied username and password, and the subsequent rendering of the 'Logged In View'; and 2. The '302' redirection and subsequent '200' rendering of the 'Login Failure View' in response to unsuccessful authentication of the user-supplied username and password.",
            "content": {
              "text/html; charset=utf-8": {
                "schema": {
                  "type": "string"
                },
                "examples": {
                  "0": {
                    "value": "Logged In View/Login Failure View (depending on authentication status)"
                  }
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://virtserver.swaggerhub.com/chris-larham-1983/e-Commerce_Registration_Customers_Addresses_Orders/0.1",
            "description": "SwaggerHub API Auto Mocking"
          }
        ]
      },
      "servers": [
        {
          "url": "https://virtserver.swaggerhub.com/chris-larham-1983/e-Commerce_Registration_Customers_Addresses_Orders/0.1",
          "description": "SwaggerHub API Auto Mocking"
        }
      ]
    },
    "/login/authenticated/logout": {
      "post": {
        "tags": [
          "Login"
        ],
        "summary": "Log the user out",
        "description": "Allows the user to log out, redirecting them to the 'Login View'.",
        "responses": {
          "200": {
            "description": "Denotes the user's logout success.",
            "content": {
              "text/html; charset=utf-8": {
                "schema": {
                  "type": "string"
                },
                "example": "Login View"
              }
            }
          }
        },
        "servers": [
          {
            "url": "https://virtserver.swaggerhub.com/chris-larham-1983/e-Commerce_Registration_Customers_Addresses_Orders/0.1",
            "description": "SwaggerHub API Auto Mocking"
          }
        ]
      },
      "servers": [
        {
          "url": "https://virtserver.swaggerhub.com/chris-larham-1983/e-Commerce_Registration_Customers_Addresses_Orders/0.1",
          "description": "SwaggerHub API Auto Mocking"
        }
      ]
    }
  },
  "components": {
    "schemas": {
      "Registration": {
        "type": "object",
        "properties": {
          "first_name": {
            "type": "string",
            "description": "The customer's first name"
          },
          "last_name": {
            "type": "string",
            "description": "The customer's last name"
          },
          "username": {
            "type": "string",
            "description": "The customer's username"
          },
          "password": {
            "type": "string",
            "description": "The customer's password"
          },
          "email": {
            "type": "string",
            "description": "The customer's email address"
          },
          "street_number": {
            "type": "integer",
            "description": "The street number associated with the customer's address"
          },
          "street_name": {
            "type": "string",
            "description": "The street name associated with the customer's address"
          },
          "town": {
            "type": "string",
            "description": "The town associated with the customer's address"
          },
          "county": {
            "type": "string",
            "description": "The county associated with the customer's address"
          },
          "country": {
            "type": "string",
            "description": "The country associated with the customer's address"
          },
          "postcode": {
            "type": "string",
            "description": "The postcode associated with the customer's address"
          }
        }
      },
      "Customer": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The customer's ID"
          },
          "first_name": {
            "type": "string",
            "description": "The customer's first name"
          },
          "last_name": {
            "type": "string",
            "description": "The customer's last name"
          },
          "username": {
            "type": "string",
            "description": "The customer's username"
          },
          "password": {
            "type": "string",
            "description": "The customer's password"
          },
          "email": {
            "type": "string",
            "description": "The customer's email address"
          }
        }
      },
      "CustomerUpdate": {
        "type": "object",
        "properties": {
          "first_name": {
            "type": "string",
            "description": "The customer's first name"
          },
          "last_name": {
            "type": "string",
            "description": "The customer's last name"
          },
          "username": {
            "type": "string",
            "description": "The customer's username"
          },
          "password": {
            "type": "string",
            "description": "The customer's password"
          },
          "email": {
            "type": "string",
            "description": "The customer's email address"
          }
        }
      },
      "Address": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The address id"
          },
          "street_number": {
            "type": "integer",
            "description": "The street number"
          },
          "street_name": {
            "type": "string",
            "description": "The street name"
          },
          "town": {
            "type": "string",
            "description": "The town"
          },
          "county": {
            "type": "string",
            "description": "The county"
          },
          "country": {
            "type": "string",
            "description": "The country"
          },
          "postcode": {
            "type": "string",
            "description": "The postcode"
          },
          "customer_id": {
            "type": "integer",
            "description": "The id of the customer who lives at this address"
          }
        }
      },
      "AddressCustomer": {
        "type": "object",
        "properties": {
          "street_number": {
            "type": "integer",
            "description": "The street number of the customer's address"
          },
          "street_name": {
            "type": "string",
            "description": "The street name of the customer's address"
          },
          "town": {
            "type": "string",
            "description": "The town associated with the customer's address"
          },
          "county": {
            "type": "string",
            "description": "The county associated with the customer's address"
          },
          "country": {
            "type": "string",
            "description": "The country associated with the customer's address"
          },
          "postcode": {
            "type": "string",
            "description": "The postcode associated with the customer's address"
          }
        }
      },
      "Order": {
        "type": "object",
        "properties": {
          "order_id": {
            "type": "integer",
            "description": "The order ID"
          },
          "date_of_purchase": {
            "type": "string",
            "description": "The timestamp associated with the order",
            "format": "date-time"
          },
          "cart": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Order_cart"
            }
          }
        }
      },
      "Product": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The product ID"
          },
          "item_name": {
            "type": "string",
            "description": "The product name"
          },
          "item_description": {
            "type": "string",
            "description": "The product description"
          },
          "image_url": {
            "type": "string",
            "description": "The URL of the image that represents the item"
          },
          "price": {
            "type": "integer",
            "description": "The price of the product in pence"
          }
        }
      },
      "ProductCreation": {
        "type": "object",
        "properties": {
          "item_name": {
            "type": "string",
            "description": "The product name"
          },
          "item_description": {
            "type": "string",
            "description": "The product description"
          },
          "image_url": {
            "type": "string",
            "description": "The URL of the image that represents the item"
          },
          "price": {
            "type": "integer",
            "description": "The price of the product in pence"
          }
        }
      },
      "ProductUpdate": {
        "type": "object",
        "properties": {
          "item_name": {
            "type": "string",
            "description": "The product name"
          },
          "item_description": {
            "type": "string",
            "description": "The product description"
          },
          "image_url": {
            "type": "string",
            "description": "The URL of the image that represents the product"
          },
          "price": {
            "type": "integer",
            "description": "The price of the product in pence"
          }
        }
      },
      "CartAddUpdate": {
        "type": "object",
        "properties": {
          "product_id": {
            "type": "integer",
            "description": "The ID of the product that is to be added to the customer's cart"
          },
          "product_quantity": {
            "type": "integer",
            "description": "The quantity of the specified product to add"
          }
        }
      },
      "CartItem": {
        "type": "object",
        "properties": {
          "product_id": {
            "type": "integer",
            "description": "The product ID"
          },
          "customer_id": {
            "type": "integer",
            "description": "The customer ID"
          },
          "product_name": {
            "type": "string",
            "description": "The product name"
          },
          "product_description": {
            "type": "string",
            "description": "The product description"
          },
          "product_image_url": {
            "type": "string",
            "description": "The URL of the image that represents the product"
          },
          "product_price": {
            "type": "integer",
            "description": "The price of the product in pence"
          },
          "product_quantity": {
            "type": "integer",
            "description": "The quantity of this particular item"
          },
          "cumulative_product_price": {
            "type": "integer",
            "description": "The result of multiplying the product_price by the product_quantity"
          },
          "cart_total": {
            "type": "integer",
            "description": "The sum total of all the items in the customer's cart"
          }
        }
      },
      "Login": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "The user-supplied username"
          },
          "password": {
            "type": "string",
            "description": "The user-supplied password"
          }
        }
      },
      "Order_cart": {
        "type": "object",
        "properties": {
          "product_id": {
            "type": "integer",
            "description": "The product ID"
          },
          "customer_id": {
            "type": "integer",
            "description": "The customer ID"
          },
          "product_name": {
            "type": "string",
            "description": "The product name"
          },
          "product_description": {
            "type": "string",
            "description": "The product description"
          },
          "product_image_url": {
            "type": "string",
            "description": "The URL of the image that represents the product"
          },
          "product_price": {
            "type": "integer",
            "description": "A representation of the product price in pence"
          },
          "product_quantity": {
            "type": "integer",
            "description": "The number of items of this product that was purchased"
          },
          "cumulative_product_price": {
            "type": "integer",
            "description": "The result of multiplying the product price by the product quantity"
          },
          "cart_total": {
            "type": "integer",
            "description": "The sum total of all items in this order"
          }
        }
      }
    }
  }
}